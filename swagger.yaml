openapi: 3.0.0

info:
  title: Architect API
  description: API Backend for Architect Website
  version: 1.0.0

servers:
  - url: http://localhost:3031/api/

paths:
  /auth/signup:
    post:
      summary: Register an user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "password"
      responses:
        '200':
          description: Registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User Created"
        '400':
          description: Bad Request
        '500':
          description: Unexpected Error
  
  /auth/login:
    post:
      summary: Log in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "password"
      responses:
        '200':
          description: Return a token with user id
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: "64823857dd250780f41def6e"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        '400':
          description: Bad Request
        '404':
          description: User not found
        '500':
          description: Unexpected Error

  /books:
    get:
      summary: get and modify books
      responses:
        '200':
          description: Return all books
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/Book'
        '500':
          description: Unexpected Error
    
    post:
      summary:  Create a book
      security:
        - BearerAuth: []

      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/definitions/Book'
      responses:
       '200':
         description: Created
         content:
           application/json:
             schema:
               type: object
               properties:
                 message:
                   type: string
                   example: "Book Created"
       '500':
         description: Unexpected Error
       '401':
         description: Unauthorized
       '400':
         description: Bad Request
  
  /books/{id}:
    get:
      summary: Get a book depending on id
      parameters:
        - name: id
          in: path
          required: true
          description: id of book to be fetched
          schema:
            type: string
            example: 64823857dd250780f41def6e
      responses:
        '200':
          description: Return a book
          content:
            application/json:
              schema:
                $ref: '#/definitions/Book'
        '500':
          description: Unexpected Behaviour

    put:
      summary: Update a book
      security:
        - BearerAuth: []

      parameters:
        - name: id
          in: path
          required: true
          description: id of book to be updated
          schema:
            type: string
            example: 64823857dd250780f41def6e
      
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/definitions/Book'
      responses:
        '200':
          description: Return a book
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book Updated"
        '500':
          description: Unexpected Behaviour
        '401':
          description: Unauthorized
        '400':
          description: Bad Request

    delete:
      summary: Delete a book
      security:
        - BearerAuth: []

      parameters:
        - name: id
          in: path
          required: true
          description: id of book to be deleted
          schema:
            type: string
            example: 64823857dd250780f41def6e
      responses:
        '200':
          description: Return a book
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book Deleted"
        '500':
          description: Unexpected Behaviour
        '401':
          description: Unauthorized
        '400':
          description: Bad Request
  
  /books/bestrating:
    get:
      summary: Get 3 of the best rated books
      responses:
        '200':
          description: Return 3 books
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/Book'
        '500':
          description: Unexpected Behaviour
  
  /books/{id}/rating:
    post:
      summary: Rate a book
      security:
        - BearerAuth: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: 64823857dd250780f41def6e
                rating:
                  type: integer
                  example: 5

      responses:
        '200':
          description: Return a book
          content:
            application/json:
              schema:
                $ref: '#/definitions/Book'
        '500':
          description: Unexpected Behaviour
        '401':
          description: Unauthorized
        '400':
          description: Bad Request

components:
  securitySchemes:
   BearerAuth:
     type: http
     scheme: bearer

securityDefinitions:
  Bearer:
    type: JWT
    name: Authorization
    in: header

definitions:
  Book:
    properties:
      _id:
        type: string
        example: "64823857dd250780f41def6e"
      userId:
        type: string
        example: "64823857dd250780f41def6e"
      title:
        type: string
        example: "one piece - Ã€ l'aube d'une grande aventure"
      author:
        type: string
        example: "Eiichiro Oda"
      imageUrl:
        type: string
        example: "data:image/jpeg;base64, LzlqLzRBQ... <!-- Base64 data -->"
      year:
        type: integer
        format: int64
        example: 1997
      genre:
        type: string
        example: "aventure"
      ratings:
        type: array
        items:
          type: object
          properties:
            userId: string
            format: "64823857dd250780f41def6e"
            grade: 5
      averageRating:
        type: integer
        format: int64
        example: 5